resp = response)
arrange(correct, desc(rt)) %>%
mutate(rtlog = log(rt))
tbl <- tbl %>%
select(sbj, everything())  %>%
rename(participant = sbj,
resp = response) %>%
arrange(correct, desc(rt)) %>%
mutate(rtlog = log(rt))
tbl <- tbl %>%
select(sbj, everything())  %>%  #note that you can still comment on separate steps
rename(participant = sbj,
resp = response)
tbl <- select(tbl, sbj, everything())
tbl <- rename(tbl,
participant = sbj,
resp = response)
tbl <- arrange(tbl, correct, desc(rt))
tbl <- mutate(tbl, rtlog = log(rt))
tbl <- tbl %>%
select(sbj, everything())  %>%  #note that you can still comment on separate steps
rename(participant = sbj,
resp = response)
# PIPING  ---------------------------------------------
#read in the original dataset
tbl <- read_csv("example_data.csv")
tbl <- tbl %>%
select(sbj, everything())  %>%
rename(participant = sbj,
resp = response) %>%
arrange(correct, desc(rt)) %>%
mutate(rtlog = log(rt))
setwd("~/Documents/GitHub/ps8-hadjisge")
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
View(tbl)
View(temp)
View(temp)
tbl_clean <- select(tbl, 1:12)
View(tbl_clean)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- is.na(D_biep.White_Good_all)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- is.na(tbl_clean, D_biep.White_Good_all)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- filter(tbl_clean, D_biep.White_Good_all == NA)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- filter(tbl_clean, is.na(D_biep.White_Good_all))
tbl_clean <- select(tbl, 1:12) #selecting the first 12 columns only
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- filter(tbl_clean, is.na(D_biep.White_Good_all))
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- select(tbl_clean, is.na(D_biep.White_Good_all))
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- filter(tbl_clean, is.na(D_biep.White_Good_all))
tbl_clean <- filter(tbl_clean, drop_na(D_biep.White_Good_all))
tbl_clean <- (tbl_clean, drop_na(D_biep.White_Good_all))
tbl_clean <- (drop_na(D_biep.White_Good_all))
tbl_clean <- (tbl_clean, drop_na(D_biep.White_Good_all))
tbl_clean <- select(tbl, 1:12) #selecting the first 12 columns only
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- (tbl_clean, drop_na(D_biep.White_Good_all))
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- drop_na(tbl_clean, D_biep.White_Good_all))
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- drop_na(tbl_clean, D_biep.White_Good_all)
tbl_clean <- rename(tbl_clean,
id = session_id,
genderidentity = gender,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)
summary(tbl_clean)
tbl_clean <- rename(tbl_clean,
id = session_id,
gender = genderidentity,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, 1:12) #selecting the first 12 columns only
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- drop_na(tbl_clean, D_biep.White_Good_all)
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)
summary(tbl_clean)
tbl_clean$gender <- is.na(tbl_clean$gender, "NA" = missing)
tbl_clean$gender <- is.na(tbl_clean$gender) "NA" = missing
tbl_clean$gender <- is.na(tbl_clean$gender)
tbl_clean$gender <- (is.na(tbl_clean$gender), "NA" = missing)
tbl_clean$gender <- is.na(tbl_clean$gender, "NA" = missing)
tbl_clean$gender <- (is.na(tbl_clean$gender), "NA" = missing)
tbl_clean$gender <- if_na(tbl_clean$gender, "missing")
tbl_clean$gender <- na_if(tbl_clean$gender, "missing")
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, 1:12) #selecting the first 12 columns only
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- drop_na(tbl_clean, D_biep.White_Good_all)
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)
summary(tbl_clean)
tbl_clean$gender <- na_if(tbl_clean$gender, "missing")
tbl_clean$gender <- na_if(tbl_clean$gender, "NA" = missing)
tbl_clean$gender <- na_if(tbl_clean$gender, "NA" = missing)
tbl_clean$gender <- na_if(tbl_clean$gender, "missing")
tbl_clean$state <- na_if(tbl_clean$state, "missing")
tbl_clean$gender <- na_if(tbl_clean$gender, "missing")
tbl_clean$state <- na_if(tbl_clean$state, "missing")
tbl_clean$gender <- recode(tbl_clean$gender, "NA" = missing)
tbl_clean$gender <- na_if(tbl_clean$gender, "missing")
tbl_clean$gender <- na_if(tbl_clean$gender, 'missing')
tbl_clean$state <- na_if(tbl_clean$state, "missing")
tbl_clean$gender <- is.na(tbl_clean$gender, 'missing')
tbl_clean$gender <- is.na(tbl_clean$gender = 'missing')
tbl_clean$gender <- is.na(tbl_clean$gender == 'missing')
tbl_clean$gender <- is.na(tbl_clean$gender = 'missing')
tbl_clean$gender <- replace_na(tbl_clean$gender, replace, "missing"")
tbl_clean$state <- na_if(tbl_clean$state, "missing")
# changing variable types  ---------------------------------------------
# next, convert id and all variables that are character types to factors
# try to convert all variables at once using tidyverse functions
tbl_clean <- ...
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- ...
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- ...
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu_14) %>% tally()
#create a new variable that recodes education into: no highscool, some highschool, highschool graduate, some college, postsecondary degree, masters (MA & MBA), advanced degree
#remember that the recode function isn't always the best solution for numeric variables
tbl_clean$edu7 <- ...
# mutating variables ---------------------------------------------
# rewrite the above recoding steps so that they both occur within a single call of the mutate function
tbl_clean <- ...
# filtering and math ---------------------------------------------
# using filtering, calculate and print the mean bias score for:
# white men
# white women
# advanced degree holders who are men
# high school graduates who are men
tbl_clean$gender <- replace_na(tbl_clean$gender, replace, "missing")
tbl_clean$gender <- replace_na(tbl_clean$gender, 0)
tbl_clean$gender <- replace_na(tbl_clean$gender, missing)
tbl_clean$gender <- replace_na(tbl_clean$gender, "missing")
tbl_clean$state <- replace_na(tbl_clean$state, "missing")
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, 1:12) #selecting the first 12 columns only
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- drop_na(tbl_clean, D_biep.White_Good_all)
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)
summary(tbl_clean)
tbl_clean$gender <- replace_na(tbl_clean$gender, "missing")
tbl_clean$state <- replace_na(tbl_clean$state, "missing")
# changing variable types  ---------------------------------------------
# next, convert id and all variables that are character types to factors
# try to convert all variables at once using tidyverse functions
str(tbl_clean)
factorVar = c('id', 'gender', 'state')
str(tbl_clean)
sapply(tbl_clean, class)
tbl_clean[sapply(tbl_clean, class) == 'factor']
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.))
tbl_clean[sapply(tbl_clean, class) == 'factor']
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
View(gender_count)
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, gender, desc(n))
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n))
gender_count[1]
gender_count[1,1]
gender_count[1,2]
gender_count[2,1]
gender_count[2,1]
gender_count[3,1]
gender_count[4,1]
gender_count[1:4,1]
print(gender_count[1:4,1])
print(gender_count[(1,2,4),1])
print(gender_count[(1:2,4),1])
print(gender_count[1:4,1]
print(gender_count[(1:4),1]
print(gender_count[1:4,1])
gender_count <- na_if(gender_count, "missing")
)
gender_count <- na.omit(gender_count)
print(gender_count[1:4,1])
print(gender_count[1:3,1])
print(gender_count[1:3,])
print(gender_count[1:3,1])
print(gender_count[(1,2,4),]) #printing the most common responses
print(gender_count[c(1,2,4),]) #printing the most common responses
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n)) #sort output based on descending n values
print(gender_count[c(1,2,4),]) #printing the most common responses
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n)) #sort output based on descending n values
print(gender_count[c(1,2,4),]) #printing the most common responses
print(gender_count[c(1,2,4),1]) #printing the most common responses not including missing values
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = Male)
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male")
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = Female, "[5]" = Genderqueer/Gender nonconforming) #recode each individually, everything else = other ~(.))
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming") #recode each individually, everything else = other ~(.))
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .default = "Other", .missing = "Other") #recode each individually, everything else = other ~(.))
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", ~(.)) = "Other") #recode each individually, everything else = other ~(.))
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .missing = "Other") #recode each individually, everything else = other ~(.))
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .default = "Other") #recode each individually, everything else = other ~(.))
gender_count <- filter(gender_count, "missing")
gender_count <- filter(gender_count, gender = "missing")
gender_count <- filter(gender_count, gender == "missing")
gender_count <- filter(gender_count, -gender == "missing")
gender_count <- filter(gender_count, -(gender == "missing"))
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n)) #sort output based on descending n values
gender_count <- filter(gender_count, -(gender == "missing"))
gender_count <- filter(gender_count, gender ==! "missing")
gender_count <- filter(gender_count, gender != "missing")
print(gender_count[(1:3),1]) #printing the most common responses not including missing values
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .default = "Other")
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu_14) %>% tally()
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu) %>% tally()
tbl_clean$edu7 <- recode(tbl_clean$edu, '1' = 'No highschool', '2' = 'No highschool', '3' = 'Some highschool',
'4' = 'Highschool Grad', '5' = 'Some college', '6' = 'Postsecondary degree', '7' = 'Postsecondary degree', '8' = 'Postsecondary degree',
'9' = 'Masters', '10' = 'Advanced Degree', '11' = 'Advanced Degree', '12' = 'Advanced Degree', '13' = 'Advanced Degree', '14' = 'Masters')
tbl_clean <- mutate(tbl_clean, gender4 = recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .default = "Other"),
edu7 = recode(tbl_clean$edu, '1' = 'No highschool', '2' = 'No highschool', '3' = 'Some highschool', '4' = 'Highschool Grad', '5' = 'Some college',
'6' = 'Postsecondary degree', '7' = 'Postsecondary degree', '8' = 'Postsecondary degree', '9' = 'Masters', '10' = 'Advanced Degree', '11' = 'Advanced Degree',
'12' = 'Advanced Degree', '13' = 'Advanced Degree', '14' = 'Masters'))
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n)) #sort output based on descending n values
gender_count <- filter(gender_count, gender != "missing")
print(gender_count[(1:3),1])
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu) %>% tally()
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
tbl_clean <- select(tbl, 1:12) #selecting the first 12 columns only
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- drop_na(tbl_clean, D_biep.White_Good_all)
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)
summary(tbl_clean)
tbl_clean$gender <- replace_na(tbl_clean$gender, "missing") #changing NA values to 'missing'
tbl_clean$state <- replace_na(tbl_clean$state, "missing") #changing NA values to 'missing'
# try to convert all variables at once using tidyverse functions
str(tbl_clean) #check the type of each variable
factorVar = c('id', 'gender', 'state')
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.))
tbl_clean[sapply(tbl_clean, class) == 'factor']
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n)) #sort output based on descending n values
gender_count <- filter(gender_count, gender != "missing")
print(gender_count[(1:3),1])
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu) %>% tally()
tbl_clean <- mutate(tbl_clean, gender4 = recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .default = "Other"),
edu7 = recode(tbl_clean$edu, '1' = 'No highschool', '2' = 'No highschool', '3' = 'Some highschool', '4' = 'Highschool Grad', '5' = 'Some college',
'6' = 'Postsecondary degree', '7' = 'Postsecondary degree', '8' = 'Postsecondary degree', '9' = 'Masters', '10' = 'Advanced Degree', '11' = 'Advanced Degree',
'12' = 'Advanced Degree', '13' = 'Advanced Degree', '14' = 'Masters'))
View(edu_count)
tbl_white_men_bias = filter(tbl_clean, gender4 = 'Male', race = '6')
tbl_white_men_bias = filter(tbl_clean, gender4 = 'Male' & race = '6')
tbl_white_men_bias = filter(tbl_clean, gender4 == 'Male' & race == '6')
View(tbl_white_men_bias)
mean_rt <- filter(tbl_white_men_bias, mean(bias))
print(tbl_white_men_bias, mean(bias))
mean_rt <- (tbl_white_men_bias, mean(bias))
mean_rt <- mutate(tbl_white_men_bias, mean = mean(bias))
View(mean_rt)
mean_bias <- mutate(tbl_white_men_bias, mean = mean(bias))
print(mean_rt)
View(mean_rt)
print(mean(tbl_white_men_bias$bias))
# white women
tbl_white_women_bias = filter(tbl_clean, gender4 == 'Female' & race == '6')
View(tbl_white_women_bias)
print(mean(tbl_white_women_bias$bias))
# white men
white_men_bias = filter(tbl_clean, gender4 == 'Male' & race == '6')
print(mean(white_men_bias$bias))
# white women
white_women_bias = filter(tbl_clean, gender4 == 'Female' & race == '6')
print(mean(white_women_bias$bias))
# advanced degree holders who are men
advanced_men = filter(tbl_clean, gender4 == 'Male' & edu7 == 'Advanced Degree')
View(advanced_men)
print(mean(advanced_men$bias))
# high school graduates who are men
highschool_men = filter(tbl_clean, gender4 == 'Male' & edu7 == 'Highschool Grad')
print(mean(highschool_men$bias))
View(mean_bias)
# loading libraries  ---------------------------------------------
library(tidyverse)
# use a tidyverse function to read in the included IAT_2019.csv file
tbl <- read_csv("IAT.csv")
View(tbl)
tbl_clean <- select(tbl, 1:12) #selecting the first 12 columns only
View(tbl_clean)
# next, clean up the rows
# our primary dependent variable is D_biep.White_Good_all, but some subjects
# don't have any data. Remove the rows with missing D_biep.White_Good_all entries
tbl_clean <- drop_na(tbl_clean, D_biep.White_Good_all)
tbl_clean <- rename(tbl_clean,
id = session_id,
race = raceomb_002,
bias = D_biep.White_Good_all,
rt = Mn_RT_all_3467,
edu = edu_14,
pol = politicalid_7,
state = STATE,
att = att_7,
temp_b = tblacks_0to10,
temp_w = twhites_0to10)
summary(tbl_clean)
tbl_clean$gender <- replace_na(tbl_clean$gender, "missing") #changing NA values to 'missing'
tbl_clean$state <- replace_na(tbl_clean$state, "missing") #changing NA values to 'missing'
# changing variable types  ---------------------------------------------
# next, convert id and all variables that are character types to factors
# try to convert all variables at once using tidyverse functions
str(tbl_clean) #check the type of each variable
factorVar = c('id', 'gender', 'state')
tbl_clean <- mutate_at(tbl_clean, factorVar, ~factor(.))
tbl_clean[sapply(tbl_clean, class) == 'factor'] #checking whether variables were converted properly
# recoding variables  ---------------------------------------------
# participants were instructed to select all the gender idenities that apply to them
# this results in a lot of combinations!
# this pipeline tabulates the number of participants who endorse different gender identities.
gender_count <- tbl_clean %>% group_by(gender) %>% tally()
View(gender_count)
# sort the output and then use indexing to print the 3 most common response (not inlcuding missing values)
gender_count <- arrange(gender_count, desc(n)) #sort output based on descending n values
gender_count <- filter(gender_count, gender != "missing") #remove the missing value
print(gender_count[(1:3),1]) #printing the most common responses
# create a new variable that recodes gender to have 4 levels: the 3 most common responses and the others collapsed together
# you can use the key provided on line 31 to understand the levels
# check out recode documentation to see if there's a trick for setting defaults values for unspecified rows
# *note that this excercise in data recoding doesn't reflect the instructors' views on gender identities...
tbl_clean$gender4 <- recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .default = "Other")
View(tbl_clean)
# Now take a look at how highest obtained education is coded (key on line 35)
edu_count <- tbl_clean %>% group_by(edu) %>% tally()
View(edu_count)
tbl_clean$edu7 <- recode(tbl_clean$edu, '1' = 'No HS', '2' = 'No HS', '3' = 'Some HS',
'4' = 'HS Grad', '5' = 'Some college', '6' = 'PS degree', '7' = 'PS degree', '8' = 'PS degree',
'9' = 'Masters', '10' = 'Advanced Degree', '11' = 'Advanced Degree', '12' = 'Advanced Degree', '13' = 'Advanced Degree', '14' = 'Masters')
tbl_clean <- mutate(tbl_clean, gender4 = recode(tbl_clean$gender, "[1]" = "Male", "[2]" = "Female", "[5]" = "Genderqueer/Gender nonconforming", .default = "Other"),
edu7 = recode(tbl_clean$edu, '1' = 'No HS', '2' = 'No HS', '3' = 'Some HS', '4' = 'HS Grad', '5' = 'Some college',
'6' = 'PS degree', '7' = 'PS degree', '8' = 'PS degree', '9' = 'Masters', '10' = 'Advanced Degree', '11' = 'Advanced Degree',
'12' = 'Advanced Degree', '13' = 'Advanced Degree', '14' = 'Masters'))
white_men_bias = filter(tbl_clean, gender4 == 'Male' & race == '6')
print(mean(white_men_bias$bias))
white_men_bias <- filter(tbl_clean, gender4 == 'Male' & race == '6')
print(mean(white_men_bias$bias))
white_women_bias <- filter(tbl_clean, gender4 == 'Female' & race == '6')
print(mean(white_women_bias$bias))
advanced_men <- filter(tbl_clean, gender4 == 'Male' & edu7 == 'Advanced Degree')
print(mean(advanced_men$bias))
# high school graduates who are men
highschool_men <- filter(tbl_clean, gender4 == 'Male' & edu7 == 'HS Grad')
print(mean(highschool_men$bias))
